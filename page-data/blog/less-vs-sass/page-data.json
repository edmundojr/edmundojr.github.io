{"componentChunkName":"component---src-templates-post-js","path":"/blog/less-vs-sass/","result":{"data":{"markdownRemark":{"id":"8ed86545-5dd1-54b7-8918-960bf8ee124a","html":"<p>CSS preprocessors help to make the CSS structure more readable and easier to maintain, with features such as variables, mixins, nesting selectors, selector inheritance, color functions. Here's a shortish comparison between Sass and Less.</p>\n<h2>Variables</h2>\n<p>Sass uses <code class=\"language-text\">$</code> and Less uses <code class=\"language-text\">@</code> for setting variables. The dollar sign has no inherit meaning in CSS, while the <code class=\"language-text\">@</code> sign does, it's used for things like declaring <code class=\"language-text\">@keyframes</code> (for animations) or <code class=\"language-text\">@media</code> queries.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// Sass</span>\n\n<span class=\"token property\"><span class=\"token variable\">$turquoise</span></span><span class=\"token punctuation\">:</span> #3DE3C9<span class=\"token punctuation\">;</span>\n\n<span class=\"token selector\">div </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$turquoise</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token comment\">// Less</span>\n\n<span class=\"token variable\">@turquoise<span class=\"token punctuation\">:</span></span> #3DE3C9<span class=\"token punctuation\">;</span>\n\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">@turquoise</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* CSS Output */</span>\n\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #3DE3C9<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Nesting</h2>\n<p>Sass and Less have the <code class=\"language-text\">&amp;</code> selector that allows nested selector to refer to the parent scope.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// Sass &amp; Less</span>\n\n<span class=\"token selector\">p </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n\n  <span class=\"token selector\">a </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n\n    <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover,\n    <span class=\"token parent important\">&amp;</span>:focus </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> purple<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* CSS Output */</span>\n\n<span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">p a</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">p a:hover,\np a:focus</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> purple<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Mixins</h2>\n<p>Mixins allow you to define styles that can be re-used throughout the stylesheet and they can even take arguments which allows you to produce a wide variety of styles with very few mixins.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// Sass</span>\n\n<span class=\"token keyword\">@mixin</span> <span class=\"token selector\">invisibility-cloak </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.harry-potter </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">@include</span> invisibility-cloak<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// CSS Output</span>\n\n<span class=\"token selector\">.harry-potter </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The difference here is that Less outputs the mixin, so you end up with styles you are probably never gonna use on your compiled CSS.</p>\n<div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token comment\">// Less</span>\n\n<span class=\"token selector\">.invisibility-cloak</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.harry-potter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token mixin-usage function\">.invisibility-cloak</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// CSS Output</span>\n\n<span class=\"token selector\">.invisibility-cloak</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.harry-potter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Mixins can also have arguments.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// Sass</span>\n\n<span class=\"token keyword\">@mixin</span> <span class=\"token function\">bordered</span><span class=\"token punctuation\">(</span><span class=\"token property\"><span class=\"token variable\">$width</span></span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$width</span> solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$width</span> solid black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">div </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">@include</span> .<span class=\"token function\">bordered</span><span class=\"token punctuation\">(</span>42px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token comment\">// Less</span>\n\n<span class=\"token selector\">.bordered(<span class=\"token variable\">@width</span>: 1px)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">@width</span> solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">@width</span> solid black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token mixin-usage function\">.bordered</span><span class=\"token punctuation\">(</span>42px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Extend: selector inheritance</h2>\n<p>There are often cases when designing a page when one class should have all the styles of another class, as well as its own specific styles. This was one of the big reasons why many chose Sass over Less. Less has added the <code class=\"language-text\">extend</code> feature in version 1.4.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// Sass</span>\n\n<span class=\"token selector\">.alert </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n\t<span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.alert-error </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">@extend</span> .alert<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token comment\">// Less</span>\n\n<span class=\"token selector\">.alert</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n\t<span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.alert-error</span> <span class=\"token punctuation\">{</span>\n  &amp;<span class=\"token punctuation\">:</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>.alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">// CSS Output\n\n.alert,\n.alert-error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.alert-error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Numbers</h2>\n<p>Both Sass and Less support basic arithmetic. However they differ significantly with respect to how they handle units.</p>\n<p>Sass supports unit-based arithmetic, just like you learned in school. Complex units are supported in any intermediate form and will only raise an error if you try to print out the value of a complex unit.</p>\n<p>Additionally, Sass has conversion tables so that any comparable units can be combined.</p>\n<p>Sass will let you define your own units and will happily print out unknown units into your css. Less will not. Sass does this as a form of future proofing against changes in the W3C specification or in case a browser introduces a non-standard unit.</p>\n<p>Less calculates some values that shouldn't be calculated in the first place, such as values inside the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/calc\"><code class=\"language-text\">calc()</code> CSS function</a> and <code class=\"language-text\">border-radius</code> with multiple values (e.g. <code class=\"language-text\">50%/10px 10px 0 0</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token comment\">// Less</span>\n\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% <span class=\"token operator\">-</span> 80px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* CSS Output */</span>\n\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>20%<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can prevent that from happen by escaping the values with the escape functions <code class=\"language-text\">~&quot;&quot;</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token comment\">// Less</span>\n\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>~<span class=\"token string\">\"100% - 80px\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this looks horrible</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* CSS Output */</span>\n\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% <span class=\"token operator\">-</span> 80px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Color manipulation</h2>\n<p>Both Sass and Less provide color math. Sass provides a full array of tools for manipulating colours, here's some of the most useful ones:</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// Sass</span>\n\n<span class=\"token property\"><span class=\"token variable\">$color</span></span><span class=\"token punctuation\">:</span> purple<span class=\"token punctuation\">;</span>\n<span class=\"token property\"><span class=\"token variable\">$amount</span></span><span class=\"token punctuation\">:</span> 10%<span class=\"token punctuation\">;</span>\n\n<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">lighten</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$amount</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">darken</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$amount</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">saturate</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$amount</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">desaturate</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$amount</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">adjust-hue</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$amount</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">compliment</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Conditionals &#x26; Control Structures</h2>\n<p>Less does not provide any conditionals or looping structures. Instead, it provides mixin guards and pattern-matching which can be used to similar effect.</p>\n<p>Sass and Less provides boolean types <code class=\"language-text\">true</code> and <code class=\"language-text\">false</code>, the <code class=\"language-text\">and</code>, <code class=\"language-text\">or</code>, and <code class=\"language-text\">not</code> operators as well as <code class=\"language-text\">&lt;</code>, <code class=\"language-text\">&gt;</code>, <code class=\"language-text\">&lt;=</code>, <code class=\"language-text\">&gt;=</code>, <code class=\"language-text\">==</code> operators. There are minor syntax differences between the two (Sass syntax shown here).</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// Sass</span>\n\n<span class=\"token keyword\">@if</span> <span class=\"token function\">lightness</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">)</span> <span class=\"token selector\">> 30% </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">@else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Looping:</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// Sass</span>\n\n<span class=\"token keyword\">@for</span> <span class=\"token variable\">$i</span> <span class=\"token keyword\">from</span> <span class=\"token selector\">1px to 10px </span><span class=\"token punctuation\">{</span>\n  .border-#<span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$i</span> solid blue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A similar example in Less, using mixins:</p>\n<div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token comment\">// Less</span>\n\n<span class=\"token selector\">.mixin (<span class=\"token variable\">@color</span>) when (lightness(<span class=\"token variable\">@color</span>) > 30%)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.mixin (<span class=\"token variable\">@color</span>) when (lightness(<span class=\"token variable\">@color</span>) =&lt; 30%)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Less supports looping via recursion, but not selector interpolation as shown in the Sass example. So in Less the example looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token variable\">@iterations<span class=\"token punctuation\">:</span></span> 10<span class=\"token punctuation\">;</span>\n\n<span class=\"token selector\">.loopingClass (<span class=\"token variable\">@index</span>) when (<span class=\"token variable\">@index</span> > 0)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token selector\">.border-@{index}px</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token function\">unit</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@index</span><span class=\"token punctuation\">,</span> px<span class=\"token punctuation\">)</span> solid blue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  .<span class=\"token function\">loopingClass</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@index</span> <span class=\"token operator\">-</span> 1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.loopingClass (0)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*stop*/</span> <span class=\"token punctuation\">}</span>\n.loopingClass <span class=\"token punctuation\">(</span><span class=\"token variable\">@iterations</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Comments</h2>\n<p>Less and Sass both support C-style <code class=\"language-text\">/* */</code> and C++ style comments <code class=\"language-text\">//</code>.</p>\n<h2>Output Formatting</h2>\n<p>Less has three output formats: normal, compressed &#x26; yui-compressed. Sass has four: nested, compact, compressed, expanded.</p>\n<hr>\n<h1>Why Sass?</h1>\n<p>Less and Sass are equally easy to install, but with Sass it's also really easy to extend on what others have built before you – <a href=\"http://getbootstrap.com/\">Bootstrap 4</a>, <a href=\"https://bulma.io/\">Bulma</a>, <a href=\"https://milligram.io/\">Miligram</a>, <a href=\"https://picturepan2.github.io/spectre/\">Spectre</a>, <a href=\"http://materializecss.com/\">Materialize</a>, <a href=\"https://material.angularjs.org/latest/\">Angular Material</a>… are all CSS frameworks built upon Sass.</p>\n<p>Sass has a better language syntax with a more extended set of features:</p>\n<ul>\n<li><code class=\"language-text\">!default</code> flag for variables</li>\n<li><code class=\"language-text\">@extend</code> for inheritance and placeholder selectors</li>\n<li><code class=\"language-text\">@if</code>, <code class=\"language-text\">@for</code>, <code class=\"language-text\">@each</code>, <code class=\"language-text\">@while</code> directives</li>\n<li>Better error messages</li>\n<li><em>AND</em> Bootstrap 4 is using Sass</li>\n</ul>","frontmatter":{"title":"Less vs Sass","date":"Thursday, November 02, 2017","tags":["CSS"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/less-vs-sass/","previous":{"fields":{"slug":"/blog/leo-tolstoy-on-personal-growth/"},"frontmatter":{"title":"On Personal Growth"}},"next":{"fields":{"slug":"/blog/reading-tip/"},"frontmatter":{"title":"Reading Tip‌‌‌‌ #1"}}}}}